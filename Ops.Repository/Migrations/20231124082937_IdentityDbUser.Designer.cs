// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ops.Repository;

#nullable disable

namespace Ops.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231124082937_IdentityDbUser")]
    partial class IdentityDbUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ops.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CountyId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9809),
                            CustomerId = 1,
                            Description = "Üsküdar metrobüse yakın",
                            IsActive = true,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CountyId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9814),
                            CustomerId = 2,
                            Description = "Acıbadem metroya yakın",
                            IsActive = true,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(407));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "8cd3835a-e055-49b2-94a4-cdd90a8442c4",
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1055),
                            IsActive = true,
                            Name = "Admin",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e099a6d5-d4cb-4a8f-966d-b307c971294c",
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1060),
                            IsActive = true,
                            Name = "Customer",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(720));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83add4e0-b275-4a47-a7d0-36b5ec325b6a",
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(367),
                            DateOfBirth = new DateTime(1998, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "besteyasak@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Beste",
                            IsActive = true,
                            LastName = "Yasak",
                            LockoutEnabled = false,
                            PasswordHash = "Beste1998.",
                            PhoneNumber = "05362459825",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8de8562a-74a4-4523-a7db-971ef2baf62b",
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(425),
                            DateOfBirth = new DateTime(1997, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huseyingulerman.1997@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hüseyin",
                            IsActive = true,
                            LastName = "Gülerman",
                            LockoutEnabled = false,
                            PasswordHash = "Beste1998.",
                            PhoneNumber = "05325841236",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d941a062-f4a8-4c62-ad38-f90d220e638c",
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(429),
                            DateOfBirth = new DateTime(1997, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "orangepressstore@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayşe",
                            IsActive = true,
                            LastName = "Tabak",
                            LockoutEnabled = false,
                            PasswordHash = "Beste1998.",
                            PhoneNumber = "05325841236",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9927),
                            IsActive = true,
                            Name = "Tişört Regular",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9930),
                            IsActive = true,
                            Name = "Tişört Oversize",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9932),
                            IsActive = true,
                            Name = "Hoodie",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9932),
                            IsActive = true,
                            Name = "Sweatshirt",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9933),
                            IsActive = true,
                            Name = "Kol Çantası",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9934),
                            IsActive = true,
                            Name = "Cüzdan",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9935),
                            IsActive = true,
                            Name = "Baf",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9995),
                            IsActive = true,
                            Name = "Istanbul",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 298, DateTimeKind.Local).AddTicks(9997),
                            IsActive = true,
                            Name = "Ankara",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(168),
                            IsActive = true,
                            Name = "Black",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(173),
                            IsActive = true,
                            Name = "Blue",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(174),
                            IsActive = true,
                            Name = "Yellow",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.ColorProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ColorProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(58),
                            IsActive = true,
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(95),
                            IsActive = true,
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(97),
                            IsActive = true,
                            ProductId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(98),
                            IsActive = true,
                            ProductId = 3,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Mark")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(229),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(231),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler",
                            IsActive = true,
                            Mark = 4,
                            ProductId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(232),
                            CustomerId = 2,
                            Description = "Çok güzel ürünler",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(233),
                            CustomerId = 2,
                            Description = "Çok güzel ürünler",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(233),
                            CustomerId = 1,
                            Description = "Çok demode",
                            IsActive = true,
                            Mark = 1,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(234),
                            CustomerId = 2,
                            Description = "Kibar duruyor ama pahalı",
                            IsActive = true,
                            Mark = 2,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(235),
                            CustomerId = 1,
                            Description = "Ehhhhh fena sayılmaz. Birdaha almam ama. :)",
                            IsActive = true,
                            Mark = 3,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(236),
                            CustomerId = 2,
                            Description = "Çok güzel ürünler. Baya beğendim. Alınır",
                            IsActive = true,
                            Mark = 4,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(236),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(237),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 2,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(238),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(238),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 1,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(239),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 2,
                            ProductId = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Counties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(299),
                            IsActive = true,
                            Name = "Fatih",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(301),
                            IsActive = true,
                            Name = "Üsküdar",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(302),
                            IsActive = true,
                            Name = "Kızılay",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(303),
                            IsActive = true,
                            Name = "Çankaya",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.HomeSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("HomeSlider");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(528),
                            IsActive = true,
                            PhotoUrl = "img/bg-img/bg-1.jpg",
                            Status = 1,
                            Subtitle = "Eşsiz Bahar Koleksiyonumuza Bir Göz Gezdirin.",
                            Title = "Bahar Koleksiyonu"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(530),
                            IsActive = true,
                            PhotoUrl = "img/bg-img/bg-2.jpg",
                            Status = 1,
                            Subtitle = "29 Ekime Özel Kargo Bedava.",
                            Title = "Kargo Bedava"
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(689),
                            Description = "Fiziksel bir mağazanız bulunuyor mu acaba?",
                            Email = "beyasak@hotmail.com",
                            IsActive = true,
                            Name = "Beste",
                            Status = 0,
                            Subject = "Bilgi Alma"
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(741),
                            CustomerId = 1,
                            IsActive = true,
                            OrderStatus = 1,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(743),
                            CustomerId = 1,
                            IsActive = true,
                            OrderStatus = 4,
                            ProductId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(743),
                            CustomerId = 1,
                            IsActive = true,
                            OrderStatus = 3,
                            ProductId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(744),
                            CustomerId = 2,
                            IsActive = true,
                            OrderStatus = 2,
                            ProductId = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(799),
                            IsActive = true,
                            PhotoUrl = "tshirt-1.jpeg",
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(803),
                            IsActive = true,
                            PhotoUrl = "tshirt-2.jpeg",
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(805),
                            IsActive = true,
                            PhotoUrl = "tshirt-1.jpeg",
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(806),
                            IsActive = true,
                            PhotoUrl = "tshirt-2.jpeg",
                            ProductId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(808),
                            IsActive = true,
                            PhotoUrl = "tshirt-1.jpeg",
                            ProductId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(809),
                            IsActive = true,
                            PhotoUrl = "tshirt-2.jpeg",
                            ProductId = 4,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 200,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(943),
                            IsActive = true,
                            Name = "Tişört",
                            Price = 200m,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(948),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 150m,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(949),
                            IsActive = true,
                            Name = " Uzun Kollu Tişört",
                            Price = 300m,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 20,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(951),
                            IsActive = true,
                            Name = "Çanta",
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 20,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(952),
                            IsActive = true,
                            Name = "Cüzdan",
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Amount = 20,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(953),
                            IsActive = true,
                            Name = "Hoodie",
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Amount = 20,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(954),
                            IsActive = true,
                            Name = "Baf",
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            Amount = 100,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(956),
                            IsActive = true,
                            Name = "Sweat",
                            Price = 500m,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(957),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 250m,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(958),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 350m,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(959),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 450m,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(960),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 1050m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(859),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(861),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(861),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(862),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(863),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 5,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1170),
                            IsActive = true,
                            Name = "Small",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1173),
                            IsActive = true,
                            Name = "Medium",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1174),
                            IsActive = true,
                            Name = "Large",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.SizeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("SizeProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1115),
                            IsActive = true,
                            ProductId = 1,
                            SizeId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1118),
                            IsActive = true,
                            ProductId = 2,
                            SizeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1120),
                            IsActive = true,
                            ProductId = 3,
                            SizeId = 3,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stocks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId")
                        .IsUnique();

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SizeId")
                        .IsUnique();

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1229),
                            IsActive = true,
                            ProductId = 1,
                            SizeId = 1,
                            Status = 0,
                            Stocks = 10
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 11, 24, 11, 29, 36, 299, DateTimeKind.Local).AddTicks(1232),
                            IsActive = true,
                            ProductId = 2,
                            SizeId = 1,
                            Status = 0,
                            Stocks = 20
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ops.Core.Entities.Address", b =>
                {
                    b.HasOne("Ops.Core.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.County", "County")
                        .WithMany("Addresses")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.AppUser", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("County");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ops.Core.Entities.ColorProduct", b =>
                {
                    b.HasOne("Ops.Core.Entities.Color", "Color")
                        .WithMany("ColorProducts")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("ColorProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.Comment", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.County", b =>
                {
                    b.HasOne("Ops.Core.Entities.City", "City")
                        .WithMany("Counties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ops.Core.Entities.HomeSlider", b =>
                {
                    b.HasOne("Ops.Core.Entities.Category", "Category")
                        .WithMany("HomeSliders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ops.Core.Entities.Order", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.Photo", b =>
                {
                    b.HasOne("Ops.Core.Entities.Color", "Color")
                        .WithMany("Photos")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.Product", b =>
                {
                    b.HasOne("Ops.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ops.Core.Entities.ProductFeature", b =>
                {
                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithOne("ProductFeature")
                        .HasForeignKey("Ops.Core.Entities.ProductFeature", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.SizeProduct", b =>
                {
                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("SizeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Size", "Size")
                        .WithMany("SizeProducts")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Ops.Core.Entities.Stock", b =>
                {
                    b.HasOne("Ops.Core.Entities.Color", "Color")
                        .WithOne("Stock")
                        .HasForeignKey("Ops.Core.Entities.Stock", "ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("Ops.Core.Entities.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Size", "Size")
                        .WithOne("Stock")
                        .HasForeignKey("Ops.Core.Entities.Stock", "SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Ops.Core.Entities.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ops.Core.Entities.Category", b =>
                {
                    b.Navigation("HomeSliders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ops.Core.Entities.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Counties");
                });

            modelBuilder.Entity("Ops.Core.Entities.Color", b =>
                {
                    b.Navigation("ColorProducts");

                    b.Navigation("Photos");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("Ops.Core.Entities.County", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Ops.Core.Entities.Product", b =>
                {
                    b.Navigation("ColorProducts");

                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Photos");

                    b.Navigation("ProductFeature")
                        .IsRequired();

                    b.Navigation("SizeProducts");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("Ops.Core.Entities.Size", b =>
                {
                    b.Navigation("SizeProducts");

                    b.Navigation("Stock")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
