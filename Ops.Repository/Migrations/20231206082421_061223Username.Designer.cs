// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ops.Repository;

#nullable disable

namespace Ops.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231206082421_061223Username")]
    partial class _061223Username
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ops.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ZIP")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CountyId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9102),
                            CustomerId = 1,
                            Description = "Üsküdar metrobüse yakın",
                            FirstName = "Beste",
                            IsActive = true,
                            LastName = "Yasak",
                            PhoneNumber = "05360249093",
                            Status = 1,
                            ZIP = 34700
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CountyId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9113),
                            CustomerId = 2,
                            Description = "Acıbadem metroya yakın",
                            FirstName = "Hüseyin",
                            IsActive = true,
                            LastName = "Gülerman",
                            PhoneNumber = "05360249093",
                            Status = 1,
                            ZIP = 34700
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 12, 6, 11, 24, 20, 386, DateTimeKind.Local).AddTicks(6810));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "e7b35378-c44e-4d4f-abba-8cb99344752e",
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1227),
                            IsActive = true,
                            Name = "Admin",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "76a9e3b9-f057-484c-a0ad-ac587b3754d3",
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1248),
                            IsActive = true,
                            Name = "Customer",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 12, 6, 11, 24, 20, 386, DateTimeKind.Local).AddTicks(7597));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MembershipAgreement")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PersonelDataProtection")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d4e1fb-fb8f-4cc4-8a9d-6f7e6f9a5261",
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(221),
                            DateOfBirth = new DateTime(1998, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "besteyasak@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Beste",
                            IsActive = true,
                            LastName = "Yasak",
                            LockoutEnabled = false,
                            MembershipAgreement = false,
                            PasswordHash = "Beste1998.",
                            PersonelDataProtection = false,
                            PhoneNumber = "05362459825",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "bf79eb40-e3f4-447a-bca0-795d674e77e2"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "112f7648-3960-4b1a-919e-669087ef421c",
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(279),
                            DateOfBirth = new DateTime(1997, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huseyingulerman.1997@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hüseyin",
                            IsActive = true,
                            LastName = "Gülerman",
                            LockoutEnabled = false,
                            MembershipAgreement = false,
                            PasswordHash = "Beste1998.",
                            PersonelDataProtection = false,
                            PhoneNumber = "05325841236",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "a528518f-c4e7-418b-85b4-5591940448de"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dad3b45-9777-4ebc-86a2-50463cb408bb",
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(288),
                            DateOfBirth = new DateTime(1997, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "orangepressstore@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayşe",
                            IsActive = true,
                            LastName = "Tabak",
                            LockoutEnabled = false,
                            MembershipAgreement = false,
                            PasswordHash = "Beste1998.",
                            PersonelDataProtection = false,
                            PhoneNumber = "05325841236",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "599aff89-b854-4d9d-adec-f1a265cc378f"
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9399),
                            IsActive = true,
                            Name = "Tişört Regular",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9403),
                            IsActive = true,
                            Name = "Tişört Oversize",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9405),
                            IsActive = true,
                            Name = "Hoodie",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9407),
                            IsActive = true,
                            Name = "Sweatshirt",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9408),
                            IsActive = true,
                            Name = "Kol Çantası",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9410),
                            IsActive = true,
                            Name = "Cüzdan",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9411),
                            IsActive = true,
                            Name = "Baf",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9545),
                            IsActive = true,
                            Name = "Istanbul",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9549),
                            IsActive = true,
                            Name = "Ankara",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9801),
                            IsActive = true,
                            Name = "Black",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9808),
                            IsActive = true,
                            Name = "Blue",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9812),
                            IsActive = true,
                            Name = "Yellow",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.ColorProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ColorProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9675),
                            IsActive = true,
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9681),
                            IsActive = true,
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9685),
                            IsActive = true,
                            ProductId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9688),
                            IsActive = true,
                            ProductId = 3,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Mark")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9971),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9974),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler",
                            IsActive = true,
                            Mark = 4,
                            ProductId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9976),
                            CustomerId = 2,
                            Description = "Çok güzel ürünler",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9977),
                            CustomerId = 2,
                            Description = "Çok güzel ürünler",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9979),
                            CustomerId = 1,
                            Description = "Çok demode",
                            IsActive = true,
                            Mark = 1,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9980),
                            CustomerId = 2,
                            Description = "Kibar duruyor ama pahalı",
                            IsActive = true,
                            Mark = 2,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9982),
                            CustomerId = 1,
                            Description = "Ehhhhh fena sayılmaz. Birdaha almam ama. :)",
                            IsActive = true,
                            Mark = 3,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9983),
                            CustomerId = 2,
                            Description = "Çok güzel ürünler. Baya beğendim. Alınır",
                            IsActive = true,
                            Mark = 4,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9985),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9986),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 2,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9988),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 5,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9989),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 1,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 388, DateTimeKind.Local).AddTicks(9991),
                            CustomerId = 1,
                            Description = "Çok güzel ürünler.Bayıldım. Herkese tavsiye ederim.",
                            IsActive = true,
                            Mark = 2,
                            ProductId = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Counties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(100),
                            IsActive = true,
                            Name = "Fatih",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(103),
                            IsActive = true,
                            Name = "Üsküdar",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(104),
                            IsActive = true,
                            Name = "Kızılay",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(105),
                            IsActive = true,
                            Name = "Çankaya",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.HomeSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("HomeSlider");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(413),
                            IsActive = true,
                            PhotoUrl = "img/bg-img/bg-1.jpg",
                            Status = 1,
                            Subtitle = "Eşsiz Bahar Koleksiyonumuza Bir Göz Gezdirin.",
                            Title = "Bahar Koleksiyonu"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(416),
                            IsActive = true,
                            PhotoUrl = "img/bg-img/bg-2.jpg",
                            Status = 1,
                            Subtitle = "29 Ekime Özel Kargo Bedava.",
                            Title = "Kargo Bedava"
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(566),
                            Description = "Fiziksel bir mağazanız bulunuyor mu acaba?",
                            Email = "beyasak@hotmail.com",
                            IsActive = true,
                            Name = "Beste",
                            Status = 0,
                            Subject = "Bilgi Alma"
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(674),
                            CustomerId = 1,
                            IsActive = true,
                            OrderStatus = 1,
                            ProductId = 1,
                            Status = 1,
                            TotalPrice = 0m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(676),
                            CustomerId = 1,
                            IsActive = true,
                            OrderStatus = 4,
                            ProductId = 2,
                            Status = 1,
                            TotalPrice = 0m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(677),
                            CustomerId = 1,
                            IsActive = true,
                            OrderStatus = 3,
                            ProductId = 3,
                            Status = 1,
                            TotalPrice = 0m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(678),
                            CustomerId = 2,
                            IsActive = true,
                            OrderStatus = 2,
                            ProductId = 1,
                            Status = 1,
                            TotalPrice = 0m
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(781),
                            IsActive = true,
                            PhotoUrl = "tshirt-1.jpeg",
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(788),
                            IsActive = true,
                            PhotoUrl = "tshirt-2.jpeg",
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(791),
                            IsActive = true,
                            PhotoUrl = "tshirt-1.jpeg",
                            ProductId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(793),
                            IsActive = true,
                            PhotoUrl = "tshirt-2.jpeg",
                            ProductId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(796),
                            IsActive = true,
                            PhotoUrl = "tshirt-1.jpeg",
                            ProductId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(799),
                            IsActive = true,
                            PhotoUrl = "tshirt-2.jpeg",
                            ProductId = 4,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 200,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1035),
                            IsActive = true,
                            Name = "Tişört",
                            Price = 200m,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1044),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 150m,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1048),
                            IsActive = true,
                            Name = " Uzun Kollu Tişört",
                            Price = 300m,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 20,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1090),
                            IsActive = true,
                            Name = "Çanta",
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 20,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1093),
                            IsActive = true,
                            Name = "Cüzdan",
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Amount = 20,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1096),
                            IsActive = true,
                            Name = "Hoodie",
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Amount = 20,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1099),
                            IsActive = true,
                            Name = "Baf",
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            Amount = 100,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1101),
                            IsActive = true,
                            Name = "Sweat",
                            Price = 500m,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1104),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 250m,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1106),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 350m,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1108),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 450m,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            Amount = 10,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1110),
                            IsActive = true,
                            Name = "Kısa Kollu Tişört",
                            Price = 1050m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(903),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(905),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(907),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(908),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(909),
                            Description = "30 derecede yıkayınız",
                            IsActive = true,
                            ProductId = 5,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1583),
                            IsActive = true,
                            Name = "Small",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1590),
                            IsActive = true,
                            Name = "Medium",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1593),
                            IsActive = true,
                            Name = "Large",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.SizeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("SizeProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1422),
                            IsActive = true,
                            ProductId = 1,
                            SizeId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1429),
                            IsActive = true,
                            ProductId = 2,
                            SizeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1432),
                            IsActive = true,
                            ProductId = 3,
                            SizeId = 3,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ops.Core.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stocks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId")
                        .IsUnique();

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SizeId")
                        .IsUnique();

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1706),
                            IsActive = true,
                            ProductId = 1,
                            SizeId = 1,
                            Status = 0,
                            Stocks = 10
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 12, 6, 11, 24, 20, 389, DateTimeKind.Local).AddTicks(1713),
                            IsActive = true,
                            ProductId = 2,
                            SizeId = 1,
                            Status = 0,
                            Stocks = 20
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ops.Core.Entities.Address", b =>
                {
                    b.HasOne("Ops.Core.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.County", "County")
                        .WithMany("Addresses")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.AppUser", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("County");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ops.Core.Entities.ColorProduct", b =>
                {
                    b.HasOne("Ops.Core.Entities.Color", "Color")
                        .WithMany("ColorProducts")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("ColorProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.Comment", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.County", b =>
                {
                    b.HasOne("Ops.Core.Entities.City", "City")
                        .WithMany("Counties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ops.Core.Entities.HomeSlider", b =>
                {
                    b.HasOne("Ops.Core.Entities.Category", "Category")
                        .WithMany("HomeSliders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ops.Core.Entities.Order", b =>
                {
                    b.HasOne("Ops.Core.Entities.AppUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.Photo", b =>
                {
                    b.HasOne("Ops.Core.Entities.Color", "Color")
                        .WithMany("Photos")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.Product", b =>
                {
                    b.HasOne("Ops.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ops.Core.Entities.ProductFeature", b =>
                {
                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithOne("ProductFeature")
                        .HasForeignKey("Ops.Core.Entities.ProductFeature", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ops.Core.Entities.SizeProduct", b =>
                {
                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithMany("SizeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Size", "Size")
                        .WithMany("SizeProducts")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Ops.Core.Entities.Stock", b =>
                {
                    b.HasOne("Ops.Core.Entities.Color", "Color")
                        .WithOne("Stock")
                        .HasForeignKey("Ops.Core.Entities.Stock", "ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("Ops.Core.Entities.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ops.Core.Entities.Size", "Size")
                        .WithOne("Stock")
                        .HasForeignKey("Ops.Core.Entities.Stock", "SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Ops.Core.Entities.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ops.Core.Entities.Category", b =>
                {
                    b.Navigation("HomeSliders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ops.Core.Entities.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Counties");
                });

            modelBuilder.Entity("Ops.Core.Entities.Color", b =>
                {
                    b.Navigation("ColorProducts");

                    b.Navigation("Photos");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("Ops.Core.Entities.County", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Ops.Core.Entities.Product", b =>
                {
                    b.Navigation("ColorProducts");

                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Photos");

                    b.Navigation("ProductFeature")
                        .IsRequired();

                    b.Navigation("SizeProducts");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("Ops.Core.Entities.Size", b =>
                {
                    b.Navigation("SizeProducts");

                    b.Navigation("Stock")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
